from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.database.database import get_db
from app.storage.distributed_storage import DistributedTrainerStorageManager
from app.services.pokemon_storage_service import PokemonStorageService
from app.schemas import PokemonTeamCreate, PokemonTeamResponse
from app.services.battle_service import PokemonBattleService
from app.services.tournament_service import (
    AdvancedTournamentService, 
    TournamentType
)
from services.security import get_current_user

router = APIRouter(prefix="/pokemon", tags=["pokemon"])

def get_pokemon_storage_service(
    db: Session = Depends(get_db),
    storage_manager: DistributedTrainerStorageManager = Depends()
):
    """
    Dependency to create PokemonStorageService
    """
    return PokemonStorageService(db, storage_manager)

# ... [previous methods remain the same]

@router.post("/tournament")
async def simulate_pokemon_tournament(
    team_ids: List[int],
    tournament_type: TournamentType = TournamentType.SINGLE_ELIMINATION,
    current_user_id: int = Depends(get_current_user),
    storage_service: PokemonStorageService = Depends(get_pokemon_storage_service)
):
    """
    Simulate a comprehensive Pokemon tournament
    
    Args:
        team_ids: List of team IDs to participate in the tournament
        tournament_type: Type of tournament to simulate
        current_user_id: Authenticated user's ID
    
    Returns:
        Detailed tournament simulation results
    """
    try:
        # Retrieve all teams
        tournament_teams = []
        for team_id in team_ids:
            team = await storage_service.retrieve_pokemon_team(
                team_id=team_id, 
                user_id=current_user_id
            )
            tournament_teams.append(team.pokemons)
        
        # Create tournament bracket
        tournament_bracket = AdvancedTournamentService.create_tournament_bracket(
            tournament_teams,
            tournament_type
        )
        
        # Simulate entire tournament
        completed_tournament = AdvancedTournamentService.simulate_tournament(
            tournament_bracket
        )
        
        # Format results for response
        return {
            "tournament_type": completed_tournament.tournament_type.value,
            "champion": completed_tournament.champion.name,
            "total_rounds": completed_tournament.current_round,
            "matches": [
                {
                    "round": match.round_number,
                    "participants": [p.name for p in match.participants],
                    "winner": match.winner.name,
                    "loser": match.loser.name,
                    "match_details": match.match_details
                } for match in completed_tournament.matches
            ]
        }
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))